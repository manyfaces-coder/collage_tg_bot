import os
import tempfile

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from magic_filter import RegexpMode
from aiogram.types import FSInputFile
import main_script
from inline_keyboards import main_inline_kb, ways_collages, input_intervals, agreement_with_intervals, image_for_collage
from bot_script_webhook import bot

from states import WaitUser
from bot_exceptions import CollageException, VerticalIntervalException, HorizontalIntervalException

router = Router(name=__name__)

pattern = r".*?(?!0)(\d+)(?!\d).+?(?!0)(\d+).*"


# –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.callback_query(F.data == "start_make_collage")
async def request_image(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.set_state(WaitUser.user_image)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤–º–µ—Å—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    buider = InlineKeyboardBuilder()
    buider.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_image')
    markup = buider.as_markup()
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.message(F.photo, WaitUser.user_image)
async def expected_image_received(message: types.Message, state: FSMContext):
    await state.update_data(user_mes=message)
    await state.update_data(user_image=message.photo)
    print(await state.get_state())
    await state.set_state(WaitUser.use_intervals)
    await message.reply(
        text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–∞–∂:", reply_markup=ways_collages())


@router.message(F.photo)
async def image_received(message: types.Message, state: FSMContext):
    await state.update_data(user_mes=message)
    await state.update_data(user_image=message.photo)
    await message.reply(text='–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–∞–∂ –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?',
                        reply_markup=image_for_collage())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∏–ª "–¥–∞"
@router.callback_query(F.data == "image_accepted")
async def image_accepted(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–∞–∂:",
                                           reply_markup=ways_collages())


@router.callback_query(F.data == "reassign_image")
async def reassign_image(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                           reply_markup=main_inline_kb())


@router.callback_query(F.data.in_({"make_simple_collage", "make_interval_collage"}))
async def interval_solution(callback_query: types.CallbackQuery, state: FSMContext):
    # –µ—Å–ª–∏ –Ω–∞–∂–∏–º–∞—é—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–±—Ä–æ—Å–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç–∞ –≤—ã–∫–ª—é—á–∞–ª–∏ –∏ –≤–∫–ª—é—á–∏–ª–∏ —Å–Ω–æ–≤–∞
    if (await state.get_data()).get("user_image") is None or (await state.get_data()).get("user_mes") is None:
        await callback_query.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞')
        return
    if callback_query.data == 'make_interval_collage':
        print('INTERVALS')
        await state.update_data(use_intervals=True)
        await state.set_state(WaitUser.intervals)
        await callback_query.message.edit_text(
            text='–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –æ–±—ã—á–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª',
            reply_markup=input_intervals())
    else:
        await state.update_data(use_intervals=False)
        data = await state.get_data()
        print(f'user_image ‚Äì {data.get("user_image")}')
        print(f'user_mes ‚Äì {data.get("user_mes")}')
        print(f'intervals ‚Äì {data.get("intervals")}')
        await state.clear()
        await make_collage(data)


async def make_collage(data: dict, vertical_interval=30, horizontal_interval=30) -> None:
    print('user_image' in data.keys())
    print("DATA")
    print(data.keys())
    message = data['user_mes']
    await bot.send_chat_action(chat_id=message.chat.id, action="upload_photo")

    file_id = data['user_image'][-1].file_id
    photo = await bot.get_file(file_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.TemporaryDirectory() as tmp_dir:
        file_path = os.path.join(tmp_dir, 'photo.jpg')
        print(f"FILE_PATH = {file_path}")
        result_file_path = False
        await bot.download(photo, file_path)

        """
        FSInputFile –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, 
        –∞ –Ω–µ –≤ –ø–∞–º—è—Ç–∏. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ 
        –Ω–µ –º–æ–≥—É—Ç –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ø–∞–º—è—Ç—å
        """

        # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ñ—É–Ω–∫—Ü–∏—é photo_collage
        try:
            result_file_path = main_script.start_for_bot(vertical_interval, horizontal_interval, file_path=file_path)
        except CollageException as exp:
            await bot.send_photo(chat_id=message.chat.id,
                                 photo=types.FSInputFile(path='main_images/murzik.jpg'),
                                 caption="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ "
                                         "–ø—Ä–∏ –æ–±—Ä–æ–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ, –º–æ–π –∫–æ—Ç —Ç–æ–∂–µ –Ω–µ –≤ "
                                         "–≤–æ—Å—Ç–æ—Ä–≥–µ :(")

        except VerticalIntervalException as exp:
            await message.reply(str(exp))

        except HorizontalIntervalException as exp:
            await message.reply(str(exp))

        except Exception as exp:
            await message.reply(str(exp))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if result_file_path:
            print(f"result_file_path {result_file_path}")
            agenda = FSInputFile(result_file_path)
            await bot.send_photo(message.chat.id, agenda)

            await message.reply("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ!\n"
                                "\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_inline_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –∫–æ–≥–¥–∞ –∂–¥–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data == 'cancel_image', WaitUser.user_image)
async def cancel_image(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_inline_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –∫–æ–≥–¥–∞ –∂–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data == 'cancel_intervals')
async def cancel_intervals(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(WaitUser.use_intervals)  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ways_collages())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.message(~F.photo, WaitUser.user_image)
async def not_image(message: types.Message):
    buider = InlineKeyboardBuilder()
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    buider.button(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_image')
    markup = buider.as_markup()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ regexp)
@router.message(WaitUser.intervals, F.text.regexp(pattern, mode=RegexpMode.FINDALL).as_("found_intervals"))
async def get_intervals(message: types.Message, state: FSMContext, found_intervals):
    if int(found_intervals[0][0]) > 100 or int(found_intervals[0][1]) > 100:
        await message.reply('üõë –û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –±–æ–ª—å—à–µ 100 üõë\n'
                            '      –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∑–∞–Ω–æ–≤–æ')
    else:
        await state.update_data(intervals=found_intervals[0])
        vertical_interval = int(found_intervals[0][0])
        horizontal_interval = int(found_intervals[0][1])
        print(vertical_interval, horizontal_interval)
        await state.set_state(WaitUser.agree_intervals)
        print(await state.get_state())
        await message.reply(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: {vertical_interval}\n'
                            f'–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏:  {horizontal_interval}'
                            f'\n–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫?',
                            reply_markup=agreement_with_intervals())  # –î–û–ë–ê–í–ò–¢–¨ –ö–ù–û–ü–ö–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö


@router.callback_query(F.data == 'intervals_accepted', WaitUser.agree_intervals)
async def intervals_accepted(state: FSMContext):
    await state.update_data(agree_intervals=True)
    data = await state.get_data()
    await state.clear()
    await make_collage(data, vertical_interval=int(data["intervals"][0]), horizontal_interval=int(data["intervals"][1]))


@router.callback_query(F.data == 'reassign_intervals', WaitUser.agree_intervals)
async def reassign_intervals(callback_query: types.CallbackQuery):
    print(F.data)
    await callback_query.message.edit_text(
        text='–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –æ–±—ã—á–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª',
        reply_markup=input_intervals())


@router.message(WaitUser.intervals)
async def not_intervals(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ —Ñ–∞–π–ª.",
                        reply_markup=input_intervals())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö"
@router.callback_query(F.data == 'intervals_info')
async def intervals_info(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    buider = InlineKeyboardBuilder()
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞"
    buider.button(text='–ù–∞–∑–∞–¥ ‚§¥', callback_data='close_about_intervals')
    markup = buider.as_markup()
    await callback_query.message.edit_text("üëâ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ‚â† 0\n \nüëâ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞\n"
                                           "\nüëâ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100\n"
                                           "\n–ñ–¥—É –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ‚Üì", reply_markup=markup)


@router.callback_query(F.data.in_({"intervals_accepted", "reassign_intervals", "cancel_image"}))
async def intervals_accepted(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞')

