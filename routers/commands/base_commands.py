import os
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery
from dotenv import load_dotenv, find_dotenv

from bot_script_webhook import tg_channels
from inline_keyboards import main_inline_kb, input_intervals, channels_kb
from routers.common_functions import check_sub
from aiogram.fsm.context import FSMContext

from utils.db import get_user_by_id, add_user, update_bot_open_status
from utils.utils import is_user_subscribed

load_dotenv(find_dotenv())
channel_id = int(os.getenv('channel_id'))

router = Router(name=__name__)
load_dotenv(find_dotenv())


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
@router.message(F.from_user.is_bot == True)
async def handle_bots(message: types.Message):
    return


@router.message(CommandStart())
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    user_data = await get_user_by_id(user_id)

    if user_data is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await add_user(telegram_id=user_id, username=message.from_user.username,
                       first_name=message.from_user.first_name)
        bot_open = False

    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ bot_open –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_open = user_data.get('bot_open', False)  # –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

    if bot_open:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
        await message.answer(text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb())

    else:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        # markup = subscribe_inline_keyboard(message.from_user.id)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n'
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:',
            reply_markup=channels_kb(tg_channels)

        )


@router.callback_query(F.data == 'check_subscription')
async def check_subs_funk(callback_query: CallbackQuery):
    for channel in tg_channels:
        label = channel.get('label')
        channel_url = channel.get('url')
        user_id = callback_query.from_user.id
        check = await is_user_subscribed(channel_url, user_id)
        if check is False:
            await callback_query.message.edit_text(f"‚ùå –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ {label}",
                                                   reply_markup=channels_kb(tg_channels))
            return False

    await update_bot_open_status(telegram_id=callback_query.from_user.id, bot_open=True)

    await callback_query.message.edit_text(
        text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb()
    )

    await callback_query.answer(text=("–°–ü–ê–°–ò–ë–û ü§ù"), show_alert=True, cache_time=10)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help", prefix="/"))
async def handle_help(message: types.Message):
    await message.answer(text=f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –µ–º—É: @oljick13")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@router.callback_query(F.data == "next_inline_kb")
async def handle_already_sub_edited(callback_query: CallbackQuery):
    if await check_sub(callback_query.message, user=callback_query.from_user.id):
        await update_bot_open_status(telegram_id=callback_query.from_user.id, bot_open=True)
        await callback_query.answer(
            text=(
                "–°–ü–ê–°–ò–ë–û ü§ù"
            ),
            show_alert=True,
            cache_time=10
        )
        await callback_query.message.edit_text(
            text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb()
        )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –≤—ã–±–æ—Ä—É"
@router.callback_query(F.data == 'back_main_inline_kb')
async def back_main_inline_kb(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=main_inline_kb()
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –≤—ã–±–æ—Ä—É"
@router.callback_query(F.data == 'close_about_intervals')
async def close_about_intervals(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text='–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –æ–±—ã—á–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª',
        reply_markup=input_intervals()
    )
