import os
from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery
from dotenv import load_dotenv, find_dotenv

from inline_keyboards import build_info_kb, main_inline_kb, ways_collages
from keyboards import ButtonText
from routers.common_functions import check_sub

load_dotenv(find_dotenv())
channel_id = int(os.getenv('channel_id'))

router = Router(name=__name__)
load_dotenv(find_dotenv())
bot = Bot(token=os.getenv('TOKEN'))


#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
@router.message(F.from_user.is_bot == True)
async def handle_bots(message: types.Message):
    return


# async def handle_all_messages(message: types.Message):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
#     is_subscribed = await bot.get_chat_member(channel_id, message.from_user.id, message.chat.id)
#
#     if is_subscribed.status == 'member' or is_subscribed.status == 'creator':
#         raise
#     else:
#         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.")

# @router.message(F.text == ButtonText.START)
#–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def handle_start(message: types.Message):
    #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    print("–ù–ê–ñ–ê–õ –°–¢–ê–†–¢")
    if await check_sub(channel_id, message.from_user.id, message.chat.id):
        await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!", reply_markup=main_inline_kb())


@router.message(F.text == ButtonText.HELP)
@router.message(Command("help", prefix="/"))
async def handle_help(message: types.Message):
    if await check_sub(channel_id, message.from_user.id, message.chat.id):
        await message.answer(text=f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –µ–º—É: @oljick13")


#TODO –Ω–µ–Ω—É–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@router.message(Command("info", prefix="/"))
async def handle_info_command(message: types.Message):
    markup_inline = build_info_kb()
    await message.answer(
        text="–ò–Ω—Ñ–∞",
        reply_markup=markup_inline,
    )

@router.callback_query(F.data == "next_inline_kb")
async def handle_already_sub_edited(callback_query: CallbackQuery):
    if await check_sub(channel_id, user_id=callback_query.from_user.id, chat_id=callback_query.message.chat.id):
        await callback_query.answer(
            text=(
                "–°–ü–ê–°–ò–ë–û ü§ù"
            ),
            show_alert=True,
            cache_time=10
        )
        await callback_query.message.edit_text(
            text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb()
        )


@router.callback_query(F.data == "start_choose_collage")
async def choose_collage(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–∞–∂:", reply_markup=ways_collages())