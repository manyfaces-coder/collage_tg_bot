import os
from aiogram import Router, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery
from dotenv import load_dotenv, find_dotenv
# from bot_script_webhook import check_flood
from bot_script_webhook import custom_redis
from bot_script_webhook import tg_channels, bot
from inline_keyboards import main_inline_kb, channels_kb, subscribe_inline_keyboard

from utils.db import get_user_by_id, add_user, update_bot_open_status, get_db_pool

load_dotenv(find_dotenv())
channel_id = int(os.getenv('channel_id'))

router = Router(name=__name__)
load_dotenv(find_dotenv())


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞
@router.message(F.from_user.is_bot == True)
async def handle_bots(message: types.Message):
    return


@router.message(CommandStart())
async def handle_start(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pool = await get_db_pool()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await get_user_by_id(pool, user_id)

    # if check_flood.is_flood(user_id=str(message.from_user.id), interval=5):
    if await custom_redis.is_flood(user_id=str(message.from_user.id), interval=1):
        await message.answer(text='–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!')
        return

    if user_data is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await add_user(pool, telegram_id=user_id, username=message.from_user.username,
                       first_name=message.from_user.first_name)
        bot_open = False

    else:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ bot_open –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_open = user_data.get('bot_open', False)  # –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

    if bot_open:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
        await message.answer(text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb())

    else:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        # markup = subscribe_inline_keyboard(message.from_user.id)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n'
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:',
            reply_markup=channels_kb(tg_channels)

        )


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help", prefix="/"))
async def handle_help(message: types.Message):
    await message.answer(text=f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –µ–º—É: @oljick13")


@router.callback_query(F.data == 'check_subscription')
async def check_subs_funk(callback_query: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤ (–Ω—É–∂–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ —Ä–µ–∫–ª–∞–º—ã)"""
    for channel in tg_channels:
        label = channel.get('label')
        channel_url = channel.get('url')
        user_id = callback_query.from_user.id
        check = await is_user_subscribed(channel_url, user_id)
        if check is False:
            await callback_query.message.edit_text(f"‚ùå –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëâ {label}",
                                                   reply_markup=channels_kb(tg_channels))
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pool = await get_db_pool()

    await update_bot_open_status(pool, telegram_id=callback_query.from_user.id, bot_open=True)

    await callback_query.message.edit_text(
        text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb()
    )

    await callback_query.answer(text=("–°–ü–ê–°–ò–ë–û ü§ù"), show_alert=True, cache_time=10)




async def check_sub(message, user=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å–Ω–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    try:
        if user is None:
            user = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user)
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            return True
        else:
            markup = subscribe_inline_keyboard(message.from_user.id)
            await bot.send_message(chat_id=message.chat.id, text="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª "
                                   , reply_markup=markup)
            await update_bot_open_status(telegram_id=message.chat.id, bot_open=False)
            return False

    except Exception as exp:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {exp}")
        await bot.send_message(chat_id=message.chat.id,
                               text="–ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
        return False


async def is_user_subscribed(channel_url: str, telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞ –∏–∑ URL, –ø—Ä–∏–º–µ—Ä (https://t.me/mnfcs)
        channel_username = channel_url.split('/')[-1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        member = await bot.get_chat_member(chat_id=f"@{channel_username}", user_id=telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            return True
        else:
            return False
    except Exception as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@router.callback_query(F.data == "next_inline_kb")
async def handle_already_sub_edited(callback_query: CallbackQuery):
    if await check_sub(callback_query.message, user=callback_query.from_user.id):
        await update_bot_open_status(telegram_id=callback_query.from_user.id, bot_open=True)
        await callback_query.answer(
            text=(
                "–°–ü–ê–°–ò–ë–û ü§ù"
            ),
            show_alert=True,
            cache_time=10
        )
        await callback_query.message.edit_text(
            text=f"–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–∂", reply_markup=main_inline_kb()
        )


